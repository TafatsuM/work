{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","props","className","href","this","url","src","imageSrc","alt","category","name","address","city","state","zipCode","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","handleTermChange","event","setState","term","target","value","location","sortBy","sortByOptions","bind","handleLocationChange","handleSearch","sortByOption","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","response","json","jsonResponse","image_url","zip_code","categories","title","review_count","console","log","error","App","then","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.59cb2959.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n\r\nbusiness = this.props.business;\r\nrender () {\r\n  return (\r\n    <div className=\"Business\">\r\n      <div className=\"image-container\">\r\n        <a href={this.business.url} >\r\n        <img src={this.business.imageSrc} alt={this.business.category}/>\r\n        </a>\r\n      </div>\r\n      <h2>{this.business.name}</h2>\r\n      <div className=\"Business-information\">\r\n        <div className=\"Business-address\">\r\n          <p>{this.business.address}</p>\r\n          <p>{this.business.city}</p>\r\n          <p>{this.business.state} {this.business.zipCode}</p>\r\n        </div>\r\n        <div className=\"Business-reviews\">\r\n          <h3>{this.business.category}</h3>\r\n          <h3 className=\"rating\">{this.business.rating} stars</h3>\r\n          <p>{this.business.reviewCount} reviews</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n};\r\n   \r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n\r\nrender () {\r\n  return (\r\n    <div className=\"BusinessList\">\r\n    {this.props.businesses.map(business=>(\r\n          <Business business={business} key={business.id} />\r\n    ))}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term:'',\r\n      location:'',\r\n      sortBy:'best_match'\r\n    };\r\n\r\n    this.sortByOptions = {\r\n      'Best Match': 'best_match',\r\n      'Highest Rated': 'rating',\r\n      'Most Reviewed': 'review_count',\r\n      'Closer': 'distance'\r\n    }\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n\r\n  }\r\n\r\n    getSortByClass (sortByOption) {\r\n      return this.state.sortBy === sortByOption ? 'active' : '' ;\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n      this.setState({ sortBy: sortByOption });\r\n    }\r\n    \r\n    handleTermChange=(event) =>{\r\n      this.setState({ term: event.target.value });\r\n    }\r\n    \r\n    handleLocationChange(event) {\r\n      this.setState({ location: event.target.value });\r\n    }\r\n\r\n    handleSearch(event) {\r\n      this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n      event.preventDefault();\r\n    }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map(sortByOption =>{\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n      <li className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} >{sortByOption}</li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>\r\n            {this.renderSortByOptions()}\r\n          </ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick={this.handleSearch} href='www.#.com' >Let's Go</a>\r\n        </div>\r\n      </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","const apiKey= 'h9rHGemjST_nSv59UvwdhtcLyjib708Sen3U7_7NjD2sidP7uSA_i0d2oNW8D4EUuAwHSN20-jP09upaXvw1KDXffUCTQ6tj5ERwq5v-h34rVy4aoHsZsIME3E_rXnYx';\r\n\r\nconst Yelp = {\r\n\r\n  async search (term, location, sortBy) {\r\n\r\n    const response = await fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, { headers: { Authorization: `Bearer ${apiKey}` } });\r\n    const jsonResponse = await response.json();\r\n    try {\r\n      if (jsonResponse.businesses) {\r\n        return jsonResponse.businesses.map(business => {\r\n          return {\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count\r\n          };\r\n        });\r\n      } else { console.log('hello world')}\r\n    }\r\n    catch(e) { console.error(`Hello World ${e}`); }\r\n    ;\r\n  }\r\n}\r\n\r\nexport default Yelp;","import React from \"react\";\nimport \"./App.css\";\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Yelp from \"../../util/Yelp\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`);\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({ businesses: businesses });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Apollo Yelp API Project</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n        <footer>\n          <span>\n            This project is reproduced from &copy;Codecademy project Ravenous\n          </span>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}